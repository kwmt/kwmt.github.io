<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Heroku on Androg</title><link>https://kwmt27.net/tags/heroku/</link><description>Recent content in Heroku on Androg</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 23 Mar 2017 12:17:50 +0900</lastBuildDate><atom:link href="https://kwmt27.net/tags/heroku/index.xml" rel="self" type="application/rss+xml"/><item><title>HerokuでGoアプリケーションを動かしたい</title><link>https://kwmt27.net/2017/03/23/how-to-deploy-go-application-on-heroku/</link><pubDate>Thu, 23 Mar 2017 12:17:50 +0900</pubDate><guid>https://kwmt27.net/2017/03/23/how-to-deploy-go-application-on-heroku/</guid><description>はじめにGoで作ったWebアプリケーションをHerokuにデプロイする手順を書いておこうと思います。最初はDockerを使わずにデプロイし、あとでDocker化してみようと思います。
セットアップHerokuのコマンドラインツールのインストールHerokuのコマンドラインツールをインストールしましょう
こちらから各環境のコマンドラインツールをインストールできます。
そしてツールをインストールしたら、
% heroku login でログインしておきます。
Heroku側にnew appを作成HerokuにデプロイするためにHerokuに新規アプリを作成しましょう
% heroku apps:create heroku-with-go --buildpack heroku/go --buildpackはHeroku上でビルドするのに必要ですのでGo用のbuildpackを設定しておきます。オープンソースですので、こちらで見ることが出来ます。
新規アプリが作成されたかブラウザで確認してみます。
% heroku open --app heroku-with-go Goアプリケーション作成してからHerokuデプロイまでGoアプリケーションを準備するのですが、Getting Started on Heroku with Goには、Githubからサンプルをクローンしてきて、デプロイしてみようみたな感じですが、ここではこのサンプルは使わず、1から自分で作ってみようと思います。
プロジェクト（ディレクトリ）作成$GOPATH にWebアプリケーションプロジェクトを作成しましょう。 今回はheroku-with-goディレクトリを作成しました。
$ mkdir $GOPATH/src/github.com/kwmt/heroku-with-go heroku-with-go にWebアプリを書いて行きましょう。
main.go作成とりあえず、簡単のためにURLのPathを表示するだけのアプリを書いてみます。(環境変数PORTを取得できるようにする必要があります)
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; ) func main() { port := os.Getenv(&amp;#34;PORT&amp;#34;) if port == &amp;#34;&amp;#34; { log.Fatal(&amp;#34;$PORT must be set&amp;#34;) } http.HandleFunc(&amp;#34;/&amp;#34;, handler) http.ListenAndServe(&amp;#34;:&amp;#34;+port, nil) } func handler(w http.</description></item></channel></rss>