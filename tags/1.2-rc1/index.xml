<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1.2 rc1 on Androg</title><link>https://kwmt27.net/tags/1.2-rc1/</link><description>Recent content in 1.2 rc1 on Androg</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 12 Oct 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://kwmt27.net/tags/1.2-rc1/index.xml" rel="self" type="application/rss+xml"/><item><title>#golang mapからstructに変換するには？</title><link>https://kwmt27.net/index.php/2013/10/13/how-to-convert-from-map-to-struct/</link><pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/13/how-to-convert-from-map-to-struct/</guid><description>&lt;h2 id="reflect-pkgを使った方法">reflect pkgを使った方法&lt;a class="anchorjs-link" href="#reflect-pkg%e3%82%92%e4%bd%bf%e3%81%a3%e3%81%9f%e6%96%b9%e6%b3%95">&lt;/a>&lt;/h2>&lt;p>最初はなんとなくリフレクションを使ってやるのかなぁと思って、調べてたらこんな感じのが出てました。（&lt;!-- raw HTML omitted -->参考リンク&lt;!-- raw HTML omitted -->）&lt;/p>
&lt;script type="text/javascript" src="https://gist.github.com/6938201.js?file=" >&lt;/script>
&lt;p>&lt;!-- raw HTML omitted -->&lt;a href="http://play.golang.org/p/5Inl2jO7zL" target="_blank">http://play.golang.org/p/5Inl2jO7zL&lt;/a>&lt;!-- raw HTML omitted -->&lt;/p></description></item><item><title>#golang リフレクションを使って、キャストするには？</title><link>https://kwmt27.net/index.php/2013/10/09/how-to-cast-with-reflect-of-golang/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/09/how-to-cast-with-reflect-of-golang/</guid><description> http://play.golang.org/p/gvadP4k1Bo
strconv.FormatIntの第一引数は”int64″型で、strconv.FormatUintの第一引数は”uint64″型です。
たとえば、ただ100と書くとint型になりますので、fv.Callの引数のところで、キャストしてあげる必要があります。キャストするには、reflectパッケージのConvertメソッドを使います。
ほとんど同じ処理で、ある一部分だけ異なる関数を使っているという場合に役に立つと思います。
ちなみに、このConvertメソッドは、go1.1のリリース時に追加されました。
http://golang.org/doc/go1.1#reflect
参考 goken/goken08-reflect.md at master · goken/goken http://golang.org/pkg/reflect/#Value.Convert #golang リフレクションを使って、関数の引数の型を取得するには？ | Androg #golang リフレクションを使って、関数をコールするには？ | Androg</description></item><item><title>#golang リフレクションを使って、関数の引数の型を取得するには？</title><link>https://kwmt27.net/index.php/2013/10/09/how-to-get-function-arg-type-with-reflect-of-golang/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/09/how-to-get-function-arg-type-with-reflect-of-golang/</guid><description> 参考 goken/goken08-reflect.md at master · goken/goken http://golang.org/src/pkg/reflect/type.go?#L157</description></item><item><title>#golang リフレクションを使って、関数をコールするには？</title><link>https://kwmt27.net/index.php/2013/10/09/how-to-call-function-with-reflect-of-golang/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/09/how-to-call-function-with-reflect-of-golang/</guid><description> 参考 goken/goken08-reflect.md at master · goken/goken http://golang.org/pkg/reflect/#Value.Call</description></item><item><title>#golang 文字数をカウントするには？</title><link>https://kwmt27.net/index.php/2013/10/10/how-to-count-number-of-string-golang/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/10/how-to-count-number-of-string-golang/</guid><description>文字数をカウントしたい！そう思ってすぐ思いついたのは、stringsパッケージのCount関数。
Exampleのあったので、確認のためRunしてみる。
なぜか期待する文字数の +1 になる。srcを見てみたところ、+1されてる・・・。なんで？
とツイートしたら、ロブ・パイク先生からお返事頂きました！
でも、あれ？ strings#Countの例にあるけど、
これは、3と出力しますよね。
これは、なんで5を出力するの？すべての文字列にempty stringが”含まれてる”んなら、1じゃないのかな！？この答えは、たぶんプログラミング言語の基本な気がする…ちょっと調べてみよう。
とにかく、期待する文字数をカウントするには、Count関数でも使われているunicode/utf8パッケージのRuneCountInString関数を使えばよさそうだ。</description></item><item><title>#golang リフレクションを使って関数名を取得するには？</title><link>https://kwmt27.net/index.php/2013/10/05/golang-how-to-get-function-name-with-reflection/</link><pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/05/golang-how-to-get-function-name-with-reflection/</guid><description>“reflect”パッケージだけでは取得できないようで、“runtime”パッケージの&amp;lt;a href=&amp;quot;http://golang.org/pkg/runtime/#FuncForPC&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;FuncForPC&amp;lt;/a&amp;gt;という関数を使うようです。
参考 reflection – How to get the name of a function in Go? – Stack Overflow goken/goken08-reflect.md at master · goken/goken</description></item><item><title>#golang 関数の引数をオプション的に扱うには？</title><link>https://kwmt27.net/index.php/2013/10/06/golang-function-arg-option/</link><pubDate>Sat, 05 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/06/golang-function-arg-option/</guid><description>分かりやすい言葉が思いつかなかったのすが、関数の引数をオプション的に扱うというのは、関数の引数をとってもとならなくても良いように関数を定義することです。それには&amp;lt;a href=&amp;quot;http://golang.org/ref/spec#Passing_arguments_to_..._parameters&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;パラメータを使うと良さそうです。
http://play.golang.org/p/kRLQLIWkxN
ただし、&amp;lt;a href=&amp;quot;http://golang.org/ref/spec#Passing_arguments_to_..._parameters&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;...&amp;lt;/a&amp;gt;パラメータは、引数の最後でしか使えませんので、注意が必要です。つまり、
のようなことはできないということです。ちなみに、こうすると次のエラーがでます。</description></item><item><title>#golang リフレクションを使って、構造体フィールドの値を取得するには？</title><link>https://kwmt27.net/index.php/2013/10/02/get-field-value-of-struct-with-reflect-golang/</link><pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/02/get-field-value-of-struct-with-reflect-golang/</guid><description>リフレクションを使って、構造体フィールドの値を取得するには？
http://play.golang.org/p/Tp5S6AVDB8
参考 Go研 Vol.8</description></item><item><title>#golang リフレクションを使って、構造体フィールドの値を変更するには？</title><link>https://kwmt27.net/index.php/2013/10/02/change-struct-field-value-with-reflect-golang/</link><pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/02/change-struct-field-value-with-reflect-golang/</guid><description>リフレクションを使って、構造体フィールドの値を変更するには？
参考 Go研 Vol.8</description></item><item><title>#Nginx + #golang (FastCGI)+ #MySQL を使ったWebアプリケーションを書くための準備</title><link>https://kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/</link><pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/10/03/nginx-golang-fcgi-mysql/</guid><description>&lt;h2 id="はじめに">はじめに&lt;a class="anchorjs-link" href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab">&lt;/a>&lt;/h2>&lt;p>下記の記事をみたら分かりやすいかもしれませんが、英語なので、実際にやった方法も交えてメモしておこうと思います。（似てるところもありますが、翻訳ではありません。）&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->Writing a Go (“golang”) Web App with nginx, FastCGI, MySQL, JSON&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>前提として、Go言語でWebサーバーをつくって動かすと言うと２種類の方法があります。&lt;/p>
&lt;p>１つは、Go言語の&lt;!-- raw HTML omitted -->“net/http”&lt;!-- raw HTML omitted -->パッケージというのがありますので、これを使ってGo自体でWebサーバーを作ってしまうことができます。&lt;/p>
&lt;p>もう1つは、ApacheやNginxなどのWebサーバー上で、CGI(正確にはFastCGI)としてGo言語を動かす方法です。これはNginx+PHP-FPMのようなもに近いイメージだと思います。&lt;/p>
&lt;p>Nginxを使うか使わないかは、こちらの&lt;!-- raw HTML omitted -->Stackoverflow&lt;!-- raw HTML omitted -->をみると、&lt;/p>
&lt;blockquote>
&lt;p>Go HTTPサーバーはいいんだけど、Webサーバーを一から作るのは大変だよ、Nginxを使った方が簡単だよ&lt;/p>
&lt;/blockquote>
&lt;p>みたいな感じで、Nginxつかった方がいいよという結論になってます。&lt;/p>
&lt;p>この記事では、2つ目の方法のNginx+golang(FastCGI)でWebアプリケーションを作る準備をメモしたいと思います。&lt;/p>
&lt;p>データベースとしては、MySQLを使いたいと思います。&lt;/p>
&lt;h2 id="使用環境">使用環境&lt;a class="anchorjs-link" href="#%e4%bd%bf%e7%94%a8%e7%92%b0%e5%a2%83">&lt;/a>&lt;/h2>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>#golang 画像ファイルをbase64 encode/decode するには</title><link>https://kwmt27.net/index.php/2013/09/29/golang-base64-encode-decode/</link><pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/09/29/golang-base64-encode-decode/</guid><description>&lt;p>ある適当な画像（ここでは”image.jpg”）をbase64エンコードした文字列に変換したあと、変換された文字列をデコードして画像ファイル（ここでは”encode_and_decord.jpg”）を作成する。&lt;/p>
&lt;p>（同じ画像ファイルが作成されるだけですが…）&lt;/p></description></item><item><title>#golang メールを送信するには</title><link>https://kwmt27.net/index.php/2013/09/26/how-to-send-mail-with-golang/</link><pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate><guid>https://kwmt27.net/index.php/2013/09/26/how-to-send-mail-with-golang/</guid><description>&lt;h2 id="最初に">最初に&lt;a class="anchorjs-link" href="#%e6%9c%80%e5%88%9d%e3%81%ab">&lt;/a>&lt;/h2>&lt;p>Go言語でのメール送信方法について、&lt;a href="https://kwmt27.net/#smtp">SMTP(ポート25番)を使った方法&lt;/a>と&lt;a href="https://kwmt27.net/#smtpovertls">Gmailを使ってメールを送信する方法(SMTP over TLS)&lt;/a>をメモしておこうと思います。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->net/smtp&lt;!-- raw HTML omitted -->パッケージを使用します。&lt;/p>
&lt;p>基本的には、go-wikiページにある &lt;!-- raw HTML omitted -->SendingMail&lt;!-- raw HTML omitted -->を参考にしています。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->SMTPコマンドリファレンス&lt;!-- raw HTML omitted -->のような仕様を読みながら、&lt;!-- raw HTML omitted -->net/smtp&lt;!-- raw HTML omitted -->パッケージのソースを読んだら理解が深まりました。感想としては、そのままwrapしてるだけって感じでした。&lt;/p></description></item></channel></rss>