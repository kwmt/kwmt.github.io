<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Googlei/O 2019 on Androg</title>
    <link>https://kwmt27.net/tags/googlei/o-2019/</link>
    <description>Recent content in Googlei/O 2019 on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 18 Aug 2019 18:50:00 +0900</lastBuildDate>
    
	<atom:link href="https://kwmt27.net/tags/googlei/o-2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>KotlinのDelegateについて</title>
      <link>https://kwmt27.net/2019/08/18/iosched-2019-kotlin-delegate/</link>
      <pubDate>Sun, 18 Aug 2019 18:50:00 +0900</pubDate>
      
      <guid>https://kwmt27.net/2019/08/18/iosched-2019-kotlin-delegate/</guid>
      <description>はじめに Google I/O 2019のソースが公開されたのでさっそく読み始めたところ、下記のコードが気になった。 KotlinのDelegated propertyであることは知っていたが、あんまり詳しく知らなかったので、今回はDelegateについて調べてみたので、それについてのメモです。
override var onboardingCompleted by BooleanPreference(prefs, PREF_ONBOARDING, false)  ちなみに、試したコードはこちらです。
https://github.com/kwmt/Kotlin-Playground/tree/master/src/main/kotlin/delegation
まずはDelegationの基本について Javaでは処理をクラスに委譲するには次のようにやっていたと思います。(下記サンプルはJavaではないが、Javaで書くならこんな感じになる)
package delegation interface Nameble { var name: String } class JackName : Nameble { override var name: String = &amp;quot;Jack&amp;quot; } class Person(name: Nameble) : Nameble { override var name: String = name.name } fun main() { val person = Person(JackName()) println(person.name) }  つまり、PersonクラスのnameをNamebleのnameに委譲したい場合、
override var name: String = name.name  と書かないといけません。</description>
    </item>
    
    <item>
      <title>Pragmatic State Management in Flutter (Google I/O&#39;19)のメモ</title>
      <link>https://kwmt27.net/2019/05/18/googleio_flutter_state_management/</link>
      <pubDate>Sat, 18 May 2019 11:50:00 +0900</pubDate>
      
      <guid>https://kwmt27.net/2019/05/18/googleio_flutter_state_management/</guid>
      <description>問題点 ネットワークから、他のwidgetからシステムコールなどから、widgetの状態変更したい場合は多くあります。
たとえば３つのWidgetがあったとき、MySliderからMyChartの状態を変更する場合、下図のようにしたくなるかもしれませんが、これにはいくつか問題があります。
1.widgetが強参照している(strongly coupling widget)
つまりMySliderはMyChartのことを知っている→これは拡張性がなくなります。not very scalable
2.グローバルの状態を持っている
多くのチャートがある場合、同期されてしまいます。
3.外のwidgetからsetStateを呼んでいること これは最悪 - どこから状態が変わったのか把握できない - クラッシュする可能性がある
下図は、UI is a functional of stateです。UI=レイアウトは、現在のアプリケーションの状態がビルドメソッドを介して決まります。
つまりは、UIは他のUIから変更されません。 findViewByIdのようなものはありません。
対策 これを解決するためには、両方のwidgetにアプローチ、アクセスできる何かが必要です。 これを今回はMyScheduleと呼びましょう。
これはMyHomePageにアタッチされます。なぜなら両方のwidgetをしっているから。
MySliderが直接MyChartを触る代わりにMyScheduleを通してMyChartに伝えます。
MySlider -&amp;gt; MyScheduler -&amp;gt; MyChartに通知notify MyChart -&amp;gt; MySchedular -&amp;gt; MySliderに変更したよ結果を通知
コードはどのようになるか？ そのためにGoogleの状態管理アプローチの歴史を見る
 Scoped model  widgetのトップにモデルがあり子孫があるとき、 モデルが変更されたら、それらの子孫は通知される、。
これは使われているが、いくつかの機能が不足している
 BLoC 複雑なアプリが複数あるAdwordsのためにつくられた。 Rxとstremaベース これは複雑すぎるという意見を聞いた  あるいは、Flutterをやるにはnewアプローチをしないと
 package:provider コミュニティベース これをGoogle内部で使っている Scopedモデルに近い  Providerを使うには まずMyScheduleを定義しましょう。
import &#39;package:flutter/widgets.dart&#39;; class MySchedule with ChangeNotifier { double _stateManagementTime = 0.</description>
    </item>
    
  </channel>
</rss>