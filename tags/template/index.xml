<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Template on Androg</title>
    <link>https://kwmt27.net/tags/template/</link>
    <description>Recent content in Template on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 18 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kwmt27.net/tags/template/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>#golang でマッチングサイトを作った時の感想。</title>
      <link>https://kwmt27.net/index.php/2013/12/18/golang-advent-calendar-2013/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://kwmt27.net/index.php/2013/12/18/golang-advent-calendar-2013/</guid>
      <description>&lt;p&gt;この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2013/go&#34; target=&#34;_blank&#34;&gt;Go Advent Calendar 2013&lt;/a&gt; の 18 日目の投稿です。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今年もいろいろと行われていますAdvent Calendarですが、初めて参加させて頂きます。プログラミング界隈のプロフェッショナルな方々の中で書くというのは、ただ1人で家で書いてるだけなのに、ちょっと緊張しちゃってます(^^ゞ　&lt;/p&gt;

&lt;p&gt;簡単にGo歴を。&lt;a href=&#34;http://bit.ly/1dJqET7&#34; target=&#34;_blank&#34;&gt;2012年1月に勉強会&lt;/a&gt;に参加してから、シンプルで守備範囲が広そうで強力で、なにより楽しいと感じ、それから自分で勉強したりして発表させて頂いたりしました(&lt;a href=&#34;http://www.slideshare.net/yasi_life/presentations&#34; target=&#34;_blank&#34;&gt;slideshare&lt;/a&gt;)。&lt;a href=&#34;http://go-talks-kwmt.appspot.com/2013/gocon-spring.slide#1&#34; target=&#34;_blank&#34;&gt;神戸からGoCon Springに参加&lt;/a&gt;したり、&lt;a href=&#34;http://bit.ly/1dJqv20&#34; target=&#34;_blank&#34;&gt;神戸から名古屋の勉強会に参加&lt;/a&gt;したりしました。&lt;/p&gt;

&lt;p&gt;そんな中、今年の10月に、マッチングサイトを作ってほしいという話があり、言語は何でもいいとのことだったので、担当者に&amp;#8221;Goはキマスよ&amp;#8221;と訴え続け、Goで作らせて頂きました。&lt;/p&gt;

&lt;p&gt;そこで、よく「Goで何ができるの？」って聞かれますので、「マッチングサイトが作れますよ」という事例を紹介したいところなのですが、そのマッチングサイトは、まだオープンしておらず、残念ながらリンクやスクリーンショットを貼ることができません。ので、そのマッチングサイトを作った時の&amp;#8221;機能&amp;#8221;と&amp;#8221;構成&amp;#8221;を簡単に説明した後、&amp;#8221;感想&amp;#8221;を書いていきたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#golang テンプレート関数を自作するには？</title>
      <link>https://kwmt27.net/index.php/2013/03/24/golang-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%96%A2%E6%95%B0%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</link>
      <pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://kwmt27.net/index.php/2013/03/24/golang-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E9%96%A2%E6%95%B0%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF/</guid>
      <description>Go言語の&amp;#8221;text/template&amp;#8221;パッケージで使用出来るテンプレートの関数は、文字列を出力するprint、ある引数の長さを出力するlenや配列の要素を出力するindexなどありますが(本家,翻訳参照)、このようなテンプレート関数を自作することができます。
サンプル 下記は、golang.orgにあるサンプルを翻訳したものですが、テンプレート関数として{{title .}} のようにすると、titleがstrings.Titleの処理を行うような関数として作成できますという例です。
 これは，型FuncMap（単なるmap）で、&amp;#8221;作成したいテンプレート関数&amp;#8221;:処理したい関数 を定義して、template.Funcs関数で、テンプレートに先ほど定義したFuncMapを登録しています。</description>
    </item>
    
    <item>
      <title>#golang のtext/templateパッケージ</title>
      <link>https://kwmt27.net/index.php/2013/03/23/golang-%E3%81%AEtexttemplate%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</link>
      <pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://kwmt27.net/index.php/2013/03/23/golang-%E3%81%AEtexttemplate%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8/</guid>
      <description>text/templateパッケージ一通り完了。
都合上、英語のままでのところもあります。
決して分からなかったわけではありまｓｎ（訳：プルリクお願いします）
https://github.com/kwmt/golangwiki/blob/master/pkg/text/template/template.md
公式ページはこちら
http://golang.org/pkg/text/template/</description>
    </item>
    
    <item>
      <title>#golang 複数のテンプレートファイルを簡単にParseするには</title>
      <link>https://kwmt27.net/index.php/2013/03/18/golang-%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%B0%A1%E5%8D%98%E3%81%ABparse%E3%81%99%E3%82%8B%E3%81%AB/</link>
      <pubDate>Mon, 18 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://kwmt27.net/index.php/2013/03/18/golang-%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%B0%A1%E5%8D%98%E3%81%ABparse%E3%81%99%E3%82%8B%E3%81%AB/</guid>
      <description>「golangでhtmlファイルの一部を別ファイルに分けるには」で、テンプレートファイルを分割するエントリを書きました。分割したファイルをパースする関数は、template.ParseFiles(filenames &amp;#8230;string)です。分割したファイルが２，３個ならこのParserFiles関数でよいと思いますが、もっと多くなったらファイルパスをゴリゴリ書かないといけません。
ゴリゴリ書かなくてもいい方法があります。それは、template.ParseGlob関数を使用することです。ファイルをパターン化することができます。
まずは下記のコードを見て下さい。(golang.orgのExampleの訳です)
 上記のコードは、$TMPDIR/template+suffixというディレクトリに、T0.tmpl, T1.tmpl, T2.tmpl という３つのファイルがあった時（このコードではテスト用に作成していますが）、パターン(pattern)を
$TMPDIR/template+suffix/*.tmpl  として、template.ParseGlobに渡しています。これで、
template.ParseFiles(&#34;dir/T0.tmpl&#34;,&#34;&#34;dir/T1.tmpl&#34;, &#34;dir/T2.tmpl&#34;) ※dir = &#34;$TMPDIR/template+suffix&#34;とおいています。  と書いたことと同じになります。
追記(2013/3/19) 上記の例の場合は、T0.tmplが親となって、T1、T2を呼び出しているため、上記patternで最初に見つかるT0.tmplが生成されるテンプレートの名前となるので、特に問題ないのですが、たとえば、T1.tmplが親となって、T0とT2を呼び出すようにした場合は、なにも表示されません。（ためしに、上記コードの3行目と5行目のcontens要素を入れかえて実行してみて下さい)
これを回避するには、template.New(&amp;quot;T1.tmpl&amp;quot;)でテンプレートを生成して、その生成されたテンプレートに対して、ParseGlob(patter)とします。具体的には次のようにします。
 これは、たとえばテンプレートファイルとして、main.tmpl、header.tmpl、footer.tmplというファイルがあるとき、パターンを &amp;#8220;*.tmpl&amp;#8221;としてParseGlobすると、生成されたテンプレート名はfooter.tmplになり、main.tmplをテンプレートとしたいときに有効です。（このサンプルはこちら）
参考 ここに上記Exampleの全体のソースをおいてます。(cloneすればすぐに確かめることができるようにしています)</description>
    </item>
    
  </channel>
</rss>