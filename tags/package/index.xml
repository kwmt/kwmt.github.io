<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Package on Androg</title>
    <link>https://kwmt27.net/tags/package/</link>
    <description>Recent content in Package on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 28 Nov 2018 08:25:00 +0900</lastBuildDate>
    
	<atom:link href="https://kwmt27.net/tags/package/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flutterパッケージを作るにあたって実行の仕方がわからなかったのでメモ</title>
      <link>https://kwmt27.net/2018/11/28/flutter-create-and-run-package/</link>
      <pubDate>Wed, 28 Nov 2018 08:25:00 +0900</pubDate>
      
      <guid>https://kwmt27.net/2018/11/28/flutter-create-and-run-package/</guid>
      <description> 作成したい名前でパッケージプロジェクトを作成する。 % flutter create --org net.kwmt27 --template=plugin -i swift -a kotlin flutter_crashlytics  ビルド確認する exampleまで移動し、Android,iOSともにビルドして、エラーが出ないことを確認します。
% cd flutter_crashlytics/example  % flutter build apk  % flutter build ios --no-codesign  実行してみる 実行するには、exampleを開いて、Flutterプロジェクトを実行するだけです。
具体的には、最初に作成したパッケージプロジェクト(flutter_crashlytics)をAndroid StudioやVSCodeで開きます。
Android Studioの場合は、すでにmain.dartが指定されているはずなので、実行ボタンをおすだけ。
VSCodeの場合は、example/lib/main.dartを開いた状態で実行すれば実行できました。
パッケージ開発 パッケージの開発するには、
 Androidの場合は、Android Studioで example/androd/build.gradleを開いて、FlutterCrashlyticsPlugin.ktあたりを触ればよさそう。 iOSの場合は、Xcodeでexample/ios/Runner.xcworkspaceを開いて、Pods/Development Pods/flutter_crashlytics/../../example/ios/.symlinks/plugins/flutter_crashlytics/ios/Classes/SwiftFlutterCrashlyticsPlugin.swiftをさわることになりそう。（こんな長いのか？？）  </description>
    </item>
    
  </channel>
</rss>