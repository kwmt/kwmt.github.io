<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gin on Androg</title><link>https://kwmt27.net/tags/gin/</link><description>Recent content in gin on Androg</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 11 Dec 2016 20:49:46 +0900</lastBuildDate><atom:link href="https://kwmt27.net/tags/gin/index.xml" rel="self" type="application/rss+xml"/><item><title>ginを軽く読んでみる</title><link>https://kwmt27.net/2016/12/11/reading-gin-gonic/</link><pubDate>Sun, 11 Dec 2016 20:49:46 +0900</pubDate><guid>https://kwmt27.net/2016/12/11/reading-gin-gonic/</guid><description>はじめに[大阪]Goモク会を開催しました。 https://connpass.com/event/13696/ gomobileを使ってアニメーションさせたりレコメンドシステムを作ったりしてる人がいる中、僕はginのコードリーディングをしました。
読んでみるReadmeに書いてるサンプル
package main import &amp;#34;gopkg.in/gin-gonic/gin.v1&amp;#34; func main() { r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;pong&amp;#34;, }) }) r.Run() // listen and serve on 0.0.0.0:8080 } gin.Default()gin.Default() から見ていきます
// Default returns an Engine instance with the Logger and Recovery middleware already attached. func Default() *Engine { engine := New() engine.Use(Logger(), Recovery()) return engine } まずは、New() ですね。 コメントにありますが、Logger と Recovery ミドルウェア付き　Engineインスタンスを作成します。
// New returns a new blank Engine instance without any middleware attached.</description></item></channel></rss>