<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>登壇 on Androg</title>
    <link>https://kwmt27.net/tags/%E7%99%BB%E5%A3%87/</link>
    <description>Recent content in 登壇 on Androg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 30 Sep 2018 15:45:00 +0900</lastBuildDate>
    
	<atom:link href="https://kwmt27.net/tags/%E7%99%BB%E5%A3%87/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AndroidやiOSのアプリ開発でいつも私がやっていることをFlutterでやってみた</title>
      <link>https://kwmt27.net/2018/09/30/try-develop-like-native-development-with-flutter/</link>
      <pubDate>Sun, 30 Sep 2018 15:45:00 +0900</pubDate>
      
      <guid>https://kwmt27.net/2018/09/30/try-develop-like-native-development-with-flutter/</guid>
      <description>はじめに 2018/09/29(土)にGDG神戸さん主催のFlutter勉強会 (9&amp;frasl;29)が開催されました。そこで「AndroidやiOSのアプリ開発でいつも私がやっていることをFlutterでやってみた」というタイトルで約30分間発表させて頂きました。
スライドはこちら
その時の発表内容を書いておきたいと思います。基本的に原稿をもとにブログ用に加筆・修正しています。また図を参照しているところは基本的にスライドを参照いただいて、必要そうなところだけブログ内に画像を貼っています。
冒頭 現在Flutterでチャットアプリを作っていてリリース間近なのですが、そのアプリ開発の目的の1つとして、AndroidやiOSのアプリ開発でいつも自分がやっていることはFlutterでできるのか、できるならどうするのかというのを目的に開発していました。
いつもやっていることっていうのは、3つあります。
 1つ目は、アプリの設計をクリーンアーキテクチャという設計でやっています。 2つ目は、例えばサーバーの向き先を変えるなど、開発と本番での設定を切り替えることをやっています。 3つ目は、CI/CDサービスを使って、たとえば、git pushしたらビルドやテストを実行し、masterブランチにマージされたら関係者にアプリを配信したりしています。  これらが実現できれば、仕事にも使える可能性はありそうだなという思いで開発し始めまして、結論から言うとできそうということがわかりましたので、それぞれについて紹介したいと思います。
クリーンアーキテクチャが実現できるか？ について見ていきましょう。
クリーンアーキテクチャはおそらくボブおじさんという方が考えたんだと思うんですが、ソフトウェア開発の設計方針の一つです。
この図は下のURLから引用したものですが、 アプリのクラスがこの円のように何層かに分かれていて、ここの矢印の方向で、クラスの依存関係を決めましょうと言っているだけです。たとえば、UIはPresenterに依存できますが、PresenterはUIに依存してはいけません。ちなみにこの円の層は何層でも構いません。
このようにすることで、
 アプリの根幹となるビジネスロジック部分がフレームワークと切り離すことができ、 ビジネスロジックをテストしやすくなったり、 UIが独立し、ビジネスロジックの変更なしにUIを変更できるようになります。 またデータベースとも独立し、たとえば、いまはFirestoreを使っているけど、AWSのdynamoDBに切り替えたりすることが容易になります。  ここまでが先程のURLにも書いてあるメリットですが、僕がもう1つ思うのは
 基本的にどんなアプリやサーバーのソフトウェア開発でも採用できるので、どこに何があるかが統一出来て分かりやすい  ということもメリットの一つかなとも思っています。まぁ一言で言うと、メンテナンスしやすい設計ということになります。
もうちょっと図を変えて説明しますね。
顔アイコンはアプリを使うユーザーと思ってください。 その下のScreenというのは、ユーザーがみてる画面で、何でも良いのですが、ここでは例えばチャットルーム一覧画面とします。 チャットルーム一覧のデータは、Firestoreというクラウドのデータベースに保存されているとします。 クリーンアーキテクチャは、このチャットルーム一覧画面がFirestoreからどうやって取得するかの方針になります。
チャットルーム一覧画面は、チャットルームの一覧を表示したいので、チャットルーム一覧を取得するUseCaseというクラスに依頼します。
そのUseCaseクラスはRoomに関するものを提供してくれるRepositoryというクラスに依頼すると、DataSourceというクラスを経由してチャットルーム一覧のデータをFirestoreから 取得し、Screenにチャットルーム一覧のデータを伝えるというのが全体の流れです。
青の矢印はデータ流れを表していて、赤の矢印は依存関係を表しています。 赤矢印の例でいうとたとえば、ScreenはUseCaseに依存していて、UseCaseはRepositoryに依存し、右側のData SourceはRepoistoryに依存しているという感じです。
また、この点線あたりで区切って、それぞれ左からpresentation層、domain層、infrastructure層と僕は呼んでいます。他の参考プロジェクトなんかはinfrastructure層をdata層と呼んだりしています。
先程のボブおじさんの図と重ねるとこんなイメージです。
ごちゃっとしててわかりにくいですかね、、、なんとなく関係ありそうなことがわかりますかね？
次に、この設計をどのように実現しているかを見ていきたいと思いますが、実現するためにには、
 言語としてインターフェイスがあることと、 DIができること  が必要になります。
まずDartにインターフェイスがあるかですが、結論から言うとあります。 interfaceというキーワードのインターフェイスではないのですが、クラスを定義すると、そのクラスの同名のインタフェースが暗黙的に定義されるという仕様です。また抽象メソッドのみをもつjavaのインターフェイスのようにするには、abstractキーワードで抽象クラスを作成して実現できます。
次にDIですが、詳しくは説明しませんが、DIとはDependency injectionの略で、一言で言うと、「必要なものを外から渡すこと」です。これはだいたいコンストラクタの引数にインスタンスを渡せればよくって、Dartは普通にそれができるので、DIができるかというよりは、依存関係を簡単に解決してくれるDIプラグインはあるか？に言いかえた方が良いかもしれません。 AndroidではDagger2やkodein、iOSではSwinjectとか使っている方が多いでしょうか。このようなプラグインをpub.dartで探しますと、 flutter_simple_dependency_injection というプラグインがあったので、それを使います。
後ほど使い方の例をお見せしますが、名前にあるように使い方はほんとにsimpleです。AndroidのDagger2のように、なぜビルドエラーになるのか悩まされることはありません。
さて、インターフェイスがあって、DIプラグインもあるので、先程の例で挙げたチャットルーム一覧画面のところを具体的に実装して行きたいと思います。
まずチャットルーム一覧を表示したいのでRoomというクラスを作り、あるユーザーのルーム一覧を取得したいのでUserというクラスを、ドメインのモデルに作っておきます。
次にルームリストを取得するというUseCaseの名前を FetchRoomListUseCase としてUseCaseを作ります。これにはexecuteメソッドをもたせ、抽象クラスとして定義します。 これを抽象クラスにしているのは、presentation層とdomain層の境界を疎結合にしたいためです。 また、executeメソッドの戻り値の型をFutureとしていますが、これはJavascriptのPromiseのようなもので、infrastructure層からpresentation層にデータを伝えるために重要な役割になるものです。
FetchRoomListUseCaseを実装するのは、FetchRoomListUseCaseImplクラスです。 FetchRoomListUseCaseImplクラスは、Repositoryからチャットルーム一覧を取得したいので、まだ作成していないですが、RoomRepositoryをもたせています。</description>
    </item>
    
    <item>
      <title>Intro to Flutter</title>
      <link>https://kwmt27.net/2018/09/15/intro-to-flutter/</link>
      <pubDate>Sat, 15 Sep 2018 16:30:00 +0900</pubDate>
      
      <guid>https://kwmt27.net/2018/09/15/intro-to-flutter/</guid>
      <description>はじめに 2018/09/15(日)にクラスメソッドさん主催のモバイルメソッド大阪第二回が開催されました。そこで「Intro to Flutter」というタイトルで発表させて頂きました。
スライドはこちら
その時の発表内容を書いておきたいと思います。基本的に原稿をもとにブログ用に加筆・修正しています。
冒頭 こんばんは！新しいiPhone出ましたね！ なんか新しいサイズが増えたとかなんとか。。 この資料作ってて全然キャッチアップできてないので、懇親会とかで教えて頂けたら嬉しいです。
余談でしたが、始めます。
今、僕自身がFlutterというものを使ってモバイルアプリを作成するのにハマっているので、Flutterの紹介させて頂きたと思います。
まず自己紹介でチャットアプリを作成中で下記の動画で紹介しました。
 現在Flutterでチャットアプリを作成中でして、ちょっと動画あるので再生しますね。 SNSログインして、チャットルームを作成します。このときチャットルームの写真を撮っています。チャットルーム名にGopherと入れて、Gopherという名前のチャットルームができました。 そのGopherのチャットルームに入って、メッセージを送信しているという動画です。
このチャットアプリは現在Deploygateにて配信中で、インストールしてためしていただくこともできますので、もしご興味があればお声がけください。
さて、本題に入ります。
今日持って帰って頂きたいものは、Flutterというものがどういうものか知って、Fluttterを触ってみたくなることが目標です。
話さないことととしては、Flutterは時折、React NativeやXamarinと比較されることがありますが、僕自身React NativeとXamarinは触ったことがありませんので、違いについては話しません。
突然ですが ここにモバイルアプリを開発できるエンジニアが一人いるとします。
このとき、たとえば
 お客さんからAndroidとiOSのアプリを作ってくださいと言われたら、 個人開発でAndroidとiOS応のアプリを作りたいなぁと思ったら、 みなさんならどうしますか？  お仕事の場合は、例えば日本人向けのアプリだからまずはiOSからつくったりして、 お客さんからもうちょっとこうしたいなぁ、という要望だったり このパターンでおちるんだけど、、、というクレームだったり
とかいろいろ対応していたら1ヶ月予定が2ヶ月、3ヶ月と過ぎてしまい、なかなかAndroidの開発できない・・・
個人の場合も、
 例えば日本人向けのアプリだからまずはiOSからつくって、 大体できたんだけど、ここ使いにくいから、もうちょっとこうしたいなぁ。 あ、使ってみて思ったけど、あの機能絶対リリースまでにはいるやん！  とか対応していたら、こちらの場合も1ヶ月予定が2ヶ月、3ヶ月過ぎてしまい、なかなかAndroidの開発できない・・・
となって、例えばiOSリリースだけで満足してしまうことってないですか？
もちろんお仕事の場合はスケジュール管理しながら進めていくと思いますのでそんなことはないと思いますが。
このようなとき、
 もし、ネィティブ並みにサクサク動くアプリが１つのソースコードコードで書けるとしたら？ もし、プログラミング言語がkotlinやswiftとは違うけど、そこそこいい感じの言語だったとしたら？ もし、開発スピードを上げれるとしたら？  iOSだけ作ってAndroidができないとか、またはリリース時期が遅くなるということはなくなりそうな気がしませんか？
これらを解決できるのがFlutterです。
Flutterとは FlutterとはAndroidと iOSアプリを１つのソースコードで開発できるtool kit です。
プログラミング言語にはDartを採用しています。
Flutterはハイパフォーマンスのレンダリングエンジンを持っていて、DartコードはネイティブARMコードにコンパイルされます。
そのため、こちらのFlutterで作成されたアプリの動画を見ていただきたいのですが、
         どうですか？なかなかきれいでサクサク動いてそうなイメージ湧きませんか？</description>
    </item>
    
  </channel>
</rss>